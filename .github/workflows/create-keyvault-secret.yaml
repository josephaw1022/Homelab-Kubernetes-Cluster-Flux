name: Set Azure Key Vault secret

on:
  workflow_dispatch:
    inputs:
      secret_name:
        description: Secret name
        required: true
      secret_value:
        description: Secret value
        required: true
      update_if_exists:
        description: Update if secret already exists
        type: boolean
        required: true
        default: false

permissions:
  id-token: write
  contents: read

jobs:
  check-secret:
    runs-on: ubuntu-latest
    env:
      KV_NAME: kubesoar-homelab-67029
    outputs:
      exists: ${{ steps.check.outputs.exists }}
    steps:
      - name: Azure login (OIDC to UAMI)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      # Mask without using step env, pull from event payload
      - name: Mask inputs
        shell: bash
        run: |
          NAME="$(jq -r '.inputs.secret_name' "$GITHUB_EVENT_PATH")"
          VALUE="$(jq -r '.inputs.secret_value' "$GITHUB_EVENT_PATH")"
          echo "::add-mask::$NAME"
          echo "::add-mask::$VALUE"

      - name: Check if secret exists
        id: check
        shell: bash
        run: |
          set -euo pipefail
          NAME="$(jq -r '.inputs.secret_name' "$GITHUB_EVENT_PATH")"
          if az keyvault secret show --vault-name "$KV_NAME" --name "$NAME" >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

  create-secret:
    needs: check-secret
    if: needs.check-secret.outputs.exists == 'false'
    runs-on: ubuntu-latest
    env:
      KV_NAME: kubesoar-homelab-67029
    steps:
      - name: Azure login (OIDC to UAMI)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Create secret
        shell: bash
        run: |
          set -euo pipefail
          NAME="$(jq -r '.inputs.secret_name' "$GITHUB_EVENT_PATH")"
          VALUE="$(jq -r '.inputs.secret_value' "$GITHUB_EVENT_PATH")"
          echo "::add-mask::$NAME"
          echo "::add-mask::$VALUE"
          az keyvault secret set \
            --vault-name "$KV_NAME" \
            --name "$NAME" \
            --value "$VALUE" \
            --only-show-errors -o none
          echo "Created."

  update-secret:
    needs: check-secret
    if: needs.check-secret.outputs.exists == 'true' && github.event.inputs.update_if_exists == 'true'
    runs-on: ubuntu-latest
    env:
      KV_NAME: kubesoar-homelab-67029
    steps:
      - name: Azure login (OIDC to UAMI)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Update secret (new version)
        shell: bash
        run: |
          set -euo pipefail
          NAME="$(jq -r '.inputs.secret_name' "$GITHUB_EVENT_PATH")"
          VALUE="$(jq -r '.inputs.secret_value' "$GITHUB_EVENT_PATH")"
          echo "::add-mask::$NAME"
          echo "::add-mask::$VALUE"
          az keyvault secret set \
            --vault-name "$KV_NAME" \
            --name "$NAME" \
            --value "$VALUE" \
            --only-show-errors -o none
          echo "Updated."
